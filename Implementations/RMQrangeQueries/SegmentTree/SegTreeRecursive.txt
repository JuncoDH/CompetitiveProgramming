//recursive SegTree
const ll MAXN = (ll)1e5;
ll segtree[4*MAXN], n;
vll v = {1, 6, 2, 5, 7, 13, 4, 11};

void build(ll id, ll l, ll r){
    if(l == r) {segtree[id] = v[l]; return;}
    ll mid = (l + r) >> 1;
    build(id<<1, l, mid);
    build(id<<1|1, mid + 1, r);
    segtree[id] = min(segtree[id<<1], segtree[id<<1|1]);
}

ll query(ll id, ll l, ll r, ll ql, ll qr){
    if(ql <= l && r <= qr) return segtree[id];
    ll mid = (l + r) >> 1;
    if(qr <= mid) return query(id<<1, l, mid, ql, qr);
    if(mid + 1 <= ql) return query(id<<1|1, mid + 1, r, ql, qr);
    ll a = query(id<<1, l, mid, ql, qr);
    ll b = query(id<<1|1, mid + 1, r, ql, qr);
    return min(a, b);
}

void update(ll id, ll l, ll r, ll pos, ll x){
    echo(l, r);
    if(l == r && l == pos) {segtree[id] = v[pos] = x; return;}
    ll mid = (l + r) >> 1;
    if(pos <= mid) update(id<<1, l, mid, pos, x);
    else update(id<<1|1, mid + 1, r, pos, x);
    segtree[id] = min(segtree[id<<1], segtree[id<<1|1]);
}

void build(){
    n = v.size();
    build(1, 0, n - 1);
}

ll query(ll l, ll r){
    return query(1, 0, v.size() - 1, l, r);
}

void update(ll pos, ll x){
    update(1, 0, n - 1, pos, x);
}