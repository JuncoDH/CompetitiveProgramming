ll n, sqrtn;
vll v = {1, 5, 2, 4, 6, 1, 3, 5, 7, 10};
vll bucket;

//O(1) update just its bucket
void update(ll i, ll x, bool initial = false){
    if(initial == true) {bucket[i/sqrtn] += x; return;}
    
    bucket[i/sqrtn] += x - v[i];
    v[i] = x;
}

//O(n) preprocess
void preprocess(){
    n = v.size();
    sqrtn = floor(sqrt(n));
    bucket.resize(sqrtn + 1, 0);
    for(int i = 0; i < n; ++i) update(i, v[i], true);
}

//O(sqrt(n)) query(a, b) = sum in range [a, b]
ll query(ll a , ll b){
    ll ans = 0, i;
    
    //they are in the same block
    if(a/sqrtn == b/sqrtn){
        for(i = a; i <= b; ++i) ans += v[i];
        return ans;
    }
    
    //count the middle buckets
    for(i = a/sqrtn + 1; i <= b/sqrtn - 1; ++i) ans += bucket[i];
    //count elements in the left most bucket
    for(i = (a/sqrtn + 1) * sqrtn  - 1; i >= a; --i) ans += v[i];
    //count elements in the rigth most bucket
    for(i = b/sqrtn * sqrtn; i <= b; ++i) ans += v[i];

    
    return ans;
}