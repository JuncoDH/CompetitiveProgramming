//Make two hashes under distint primes for avoiding hacks / collisions
//find hashes using map[hash_1] = hash_2
const ll mod = 1e9 + 7;
const ll prime1 = 31;//prime > size of the alphabet
const ll prime2 = 53;
const ll MAX_L = 1e6;//max length of the string
ll p1[MAX_L], p2[MAX_L];

void fill_p1(){
    p1[0] = 1;
    for(ll i = 1; i < MAX_L; ++i) p1[i] = p1[i - 1] * prime1 % mod;
}

void fill_p2(){
    p2[0] = 1;
    for(ll i = 1; i < MAX_L; ++i) p2[i] = p2[i - 1] * prime2 % mod;
}

ll hash1(string s){
    ll i, ans = 0, n = s.length();
    for(i = 0; i < n; ++i){
        ans += (s[i] - 'a' + 1) * p1[i] % mod;
        ans %= mod;
    }
    return ans;
}

ll hash2(string s){
    ll i, ans = 0, n = s.length();
    for(i = 0; i < n; ++i){
        ans += (s[i] - 'a' + 1) * p2[i] % mod;
        ans %= mod;
    }
    return ans;
}