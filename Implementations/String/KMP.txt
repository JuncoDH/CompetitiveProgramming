//KMP for pattern searching
//lps[i] : longest proper prefix in pat[0..i] that is also a suffix in pat[0...i]
void KMPsearch(string &txt, string &pat) {
    ll i, j, len = 0, n = txt.length(), m = pat.length();
    vi lps(m, 0); 
    
    //create lps array
    for(i = 1; i < m;) {
        if(pat[i] == pat[len]) {
            ++len;
            lps[i++] = len;
        }
        else{
            if(len == 0) ++i;
            else len = lps[len - 1];
        }
    }
    
    //search for pat in txt
    for(i = 0, j = 0; i < n;) {
        if(txt[i] == pat[j]) {
            ++i;
            ++j;
            if(j == m) {
                cout << "FOUND AT:" << i - m << "\n";
                j = lps[j - 1];
            }
        }
        else {
            if(j == 0) ++i;
            else j = lps[j - 1];
        }
    }
    
    cout << "Finished" << endl;
}