//Sparse Table, look[MAXN][LOG_MAXN]; look[i][j] = min element starting in index i and range 2^j, [i, i + 2^j - 1]
//works with min, max, gcd
//preprocess O(nlogn) query O(1), can't change values (static values)
const ll MAX = 100;
ll table[MAX][(ll)(log2(MAX)) + 10], n;
vll v;

ll f(ll a, ll b) {return min(a, b);}

void preprocess(){
    ll i, j, log2n;
    n = v.size();
    log2n = (ll)log2(n);
    for(i = 0; i < n; ++i) table[i][0] = v[i];
    
    for(j = 1; j <= log2n; ++j){
        for(i = 0; i < n; ++i){
            if((i + (1ll << j) - 1) >= n) break;
            table[i][j] = f(table[i][j - 1], table[i + (1ll << (j - 1))][j - 1]);
        }
    }
}