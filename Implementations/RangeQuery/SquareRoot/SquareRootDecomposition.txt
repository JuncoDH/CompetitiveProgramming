template<typename T>
class SquareRootDecomposition {
    const int N = //10; //max Input size
    const int B = //3; //size of the bucket, ~ sqrt(N)
    vector<T> bucket;//(N/B + 1, 0T);
    vector<T> v;
    public:
    SquareRootDecomposition(vector<T> &_v) {
        bucket.assign(N/B +1, 0);
        int i;
        v = _v;
        for(i = 0; i < (int)v.size(); i++) {
            bucket[i/B] += _v[i];
        }
    }
    T query(int l, int r) {
        T ans = 0;
        int i;
        if(l/B == r/B) {
            for(i = l; i <= r; i++) ans += v[i]; //same block
            return ans;
        }
        for(i = l/B + 1; i <= r/B -1; i++) ans += bucket[i]; //middle blocks
        for(i = l; i/B+1 == l/B+1; i++) ans += v[i]; //left block
        for(i = B*(r/B); i <= r; i++) ans += v[i]; //right block

        return ans;
    }
    void update(int x, T dx) {
        bucket[x/B] += dx - v[x];
        v[x] = dx;
    }
};
