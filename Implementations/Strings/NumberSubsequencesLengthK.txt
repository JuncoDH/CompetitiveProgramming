const ll MAX_L = 110;//max length AKA string.size
ll dp[MAX_L][MAX_L];//dp[i][j] number of subsequences starting with index at least i with length j
ll nxt[277][MAX_L]; //next[i][j] next ocurrence of char i in index j

ll n, k;
string s;
//dp[0][L] is how many subsequences are in a string with length L
void fill_dp(){
    ll i, j, prev;
    for(i = 'a'; i <= 'z'; ++i){
        prev = n; //dp[n][] = 0
        for(j = n - 1; j >= 0; --j){
            nxt[i][j] = prev;
            if((int)s[j] == i){ nxt[i][j] = prev; prev = j;}  
            else nxt[i][j] = prev;
        }
    }

    dp[0][0] = 1;// "" empty string

    vi used(26);
    fill(all(used), 0);
  
    //base case len = 1
    dp[n - 1][1] = 1;
    used[s[n - 1] - 'a'] = 1;
    for(i = n-2; i >= 0; --i){
        dp[i][1] = dp[i + 1][1];
        if(!used[s[i] - 'a']){
            dp[i][1]++;
            used[s[i] - 'a'] = 1;
        }
    }
    
    vi last(26);
  
    //rest of the L's
    for(j = 2; j <= n; ++j){
        for(i = n - j; i >= 0; --i){
            dp[i][j] = dp[i + 1][j];
            dp[i][j] += dp[i + 1][j - 1];
            dp[i][j] -= dp[nxt[(int)s[i]][i] + 1][j - 1];
        }
    }
    
}