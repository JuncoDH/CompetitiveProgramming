//O(n ^ 2 * m) or O(n ^ 3) if square
//maximum sum in a subrectangle of a n x m grid. for all fixed O(n ^ 2) columns do a O(m) Kadane
//keep the coordinates of the maximum sum in (rowu, coll), (rowd, colr)

vector<vll> v, presum;
vll kadane;
ll n, m, coll, colr, rowu, rowd, tempu, tempd;

//O(n) maximum sum, Kadane Algorithm
ll kadane1D() {
    ll ans = kadane[0], M = kadane[0], i, pu = 0;
    for(i = 1; i < n; ++i) {
        
        if(kadane[i] > M + kadane[i]) {
            pu = i;
        }
        
        M = max(kadane[i], M + kadane[i]);

        if(M > ans) {
            ans = M;
            tempu = pu;
            tempd = i;
        }

    }
    return ans;
}


ll sum2D() {
    ll i, j, k, ans = v[0][0], sum;
    kadane.assign(n, 0);
    presum.assign(n, vll(m, 0)); //prefix row sum
    
    for(i = 0; i < n; ++i) {
        for(j = 0; j < m; ++j) {
            presum[i][j] = v[i][j];
            if(j > 0) presum[i][j] += presum[i][j - 1];
        }
    }
    
    for(i = 0; i < m; ++i) {
        for(j = i + 1; j < m; ++j) {
            for(k = 0; k < n; ++k) {
                if(i == 0) kadane[k] = presum[k][j];
                else kadane[k] = presum[k][j] - presum[k][i - 1];
            }
            sum = kadane1D();
            if(sum > ans) {
                ans = sum;
                coll = i;
                colr = j;
                rowu = tempu;
                rowd = tempd;
            }
        }
    }

    //echo(rowu, coll, rowd, colr);
    return ans;
}