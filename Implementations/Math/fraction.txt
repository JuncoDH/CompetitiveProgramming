/*
 * Fraction structure
 * 
 * fc add(fc x);
 * fc mul(fc x);
 * void show();
 * 
 * vector<fc> mul(vector<fc> v, fc x);
 * vector<fc> add(vector<fc> v, vector<fc> w);
 * fc dot(vector<fc> a, vector<fc> b);
 * fc norm2(vector<fc> v);
 * void show(vector<fc> v); 
 * */
struct fc{
    ll num, den;
    fc(ll _num, ll _den) : num(_num), den(_den) {}
    fc(ll _num) : num(_num), den(1) {}
    fc() : num(0), den(1) {}
    
    fc add(fc x) {
        fc ans(num*x.den + x.num*den, den*x.den);
        ll g = _gcd(ans.num, ans.den);
        ans.num /= g;
        ans.den /= g;
        return ans;
    }
    
    fc mul(fc x) {
        fc ans(num*x.num, den*x.den);
        ll g = _gcd(ans.num, ans.den);
        ans.num /= g;
        ans.den /= g;
        return ans;
    }
    
    void show() {
        ll g = _gcd(num, den);
        num /= g;
        den /= g;
        if(den < 0) {
            den *= -1;
            num *= -1;
        }
        cout << "(" << num << "/" << den << ")";
    }
};

vector<fc> mul(vector<fc> v, fc x) {
    ll n = v.size(), i, g;
    vector<fc> ans(n);
    for(i = 0; i < n; i++) {
        ans[i] = v[i];
        ans[i].num *= x.num;
        ans[i].den *= x.den;
        g = _gcd(ans[i].num, ans[i].den);
        ans[i].num /= g;
        ans[i].den /= g;
    }
    return ans;
}

vector<fc> add(vector<fc> v, vector<fc> w) {
    ll n = v.size(), i, g;
    vector<fc> ans(n);
    for(i = 0; i < n; i++) {
        ans[i] = v[i].add(w[i]);
        g = _gcd(ans[i].num, ans[i].den);
        ans[i].num /= g;
        ans[i].den /= g;
    }
    return ans;
}

fc dot(vector<fc> a, vector<fc> b) {
    ll n = a.size(), i;
    fc ans;
    if(n != b.size()) return ans;
    for(i = 0; i < n; i++) {
        ans = ans.add(a[i].mul(b[i]));
    }
    return ans;
}

fc norm2(vector<fc> v) {
    fc ans;
    for(auto el : v) {
        ans = ans.add(el.mul(el));
    }
    return ans;
}

void show(vector<fc> v) {cout << "vector:"; for(auto el : v) el.show(); cout << endl;}